{"version":3,"sources":["components/CardWaiting/CardWaiting.js","utils/useLocalState.js","components/FieldOperator/FieldOperator.js","views/LandingPage/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["CardWaiting","props","Card","bg","color","text","style","width","className","Header","header","Body","Title","title","Text","start","end","number","duration","useLocalState","key","defaultValue","useState","storedValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","listener","e","storageArea","newValue","window","addEventListener","removeEventListener","currentValue","result","setItem","stringify","FieldOperator","setData","Container","fluid","Form","Group","controlId","Control","type","placeholder","onChange","target","LandingPage","data","Button","href","variant","Row","Col","parseInt","App","basename","process","exact","path","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1600a3ac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport CountUp from \"react-countup\";\r\n\r\nexport default function CardWaiting(props) {\r\n  return (\r\n    <>\r\n      <Card\r\n        bg={props.color}\r\n        text=\"dark\"\r\n        style={{ width: \"18rem\" }}\r\n        className=\"shadow\"\r\n      >\r\n        <h3>\r\n          <Card.Header className=\"text-center text-dark\">\r\n            {props.header}\r\n          </Card.Header>\r\n        </h3>\r\n        <Card.Body>\r\n          <Card.Title className=\"text-center text-success\">\r\n            {props.title}\r\n          </Card.Title>\r\n          <Card.Text className=\"text-center text-primary display-3\">\r\n            <CountUp start={0} end={props.number} duration={5} />\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useLocalState = (key, defaultValue) => {\r\n  const [value, setValue] = useState(() => {\r\n    const storedValue = localStorage.getItem(key);\r\n    return storedValue === null ? defaultValue : JSON.parse(storedValue);\r\n  });\r\n\r\n  useEffect(() => {\r\n    const listener = e => {\r\n      if (e.storageArea === localStorage && e.key === key) {\r\n        setValue(JSON.parse(e.newValue));\r\n      }\r\n    };\r\n    window.addEventListener(\"storage\", listener);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"storage\", listener);\r\n    };\r\n  }, [key]);\r\n\r\n  const setValueInLocalStorage = newValue => {\r\n    setValue(currentValue => {\r\n      const result =\r\n        typeof newValue === \"function\" ? newValue(currentValue) : newValue;\r\n      localStorage.setItem(key, JSON.stringify(result));\r\n      return result;\r\n    });\r\n  };\r\n\r\n  return [value, setValueInLocalStorage];\r\n};\r\n","import React from \"react\";\r\nimport { Form, Container } from \"react-bootstrap\";\r\nimport { useLocalState } from \"../../utils/useLocalState\";\r\n\r\nexport default function FieldOperator() {\r\n  const [data, setData] = useLocalState(\"data\", \"\");\r\n\r\n  return (\r\n    <>\r\n      <Container fluid className=\"mt-5\">\r\n        <Form>\r\n          <Form.Group controlId=\"formBasicCounter\">\r\n            <Form.Control\r\n              type=\"number\"\r\n              placeholder=\"Enter number\"\r\n              onChange={e => setData(e.target.value)}\r\n            />\r\n            <Form.Text className=\"text-muted\">\r\n              Enter your number and see dynamic changes on front page\r\n            </Form.Text>\r\n          </Form.Group>\r\n        </Form>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nimport { CardWaiting } from \"../../components\";\r\nimport { useLocalState } from \"../../utils/useLocalState\";\r\n\r\nexport default function LandingPage() {\r\n  const [data, setData] = useLocalState(\"data\", \"\");\r\n\r\n  return (\r\n    <Container fluid className=\"mt-5\">\r\n      <center>\r\n        <Button href=\"/operator\" target=\"blank\" variant=\"primary\">\r\n          Open operator page\r\n        </Button>\r\n        <p />\r\n        <Row>\r\n          <Col>\r\n            <CardWaiting\r\n              color={\"light\"}\r\n              header={\"Complain\"}\r\n              title={\"Counter\"}\r\n              number={data !== \"\" ? parseInt(data) : setData(10)}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </center>\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { LandingPage } from \"./views\";\r\nimport { FieldOperator } from \"./components\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={LandingPage} />\r\n          <Route path=\"/operator\" component={FieldOperator} />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}